{"version":3,"sources":["components/todoreact/todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","inputdata","setInputData","lists","localStorage","getItem","JSON","parse","getLocalData","items","setItems","isEditItem","setIsEditItem","toggleButton","setToggleButton","addItem","map","curElem","id","name","myNewInputData","Date","getTime","toString","alert","useEffect","setItem","stringify","className","src","alt","type","placeholder","value","onChange","event","target","onClick","index","item_todo_edited","find","editItem","updatedItems","filter","deleteItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAmMeA,EAhLF,WAGX,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAGA,EAA0BF,mBArBP,WACnB,IAAMG,EAAQC,aAAaC,QAAQ,cAGnC,OAAIF,EACKG,KAAKC,MAAMJ,GAGX,GAa0BK,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAGA,EAAoCV,mBAAS,IAA7C,mBAAOW,EAAP,KAAmBC,EAAnB,KAGA,EAAwCZ,oBAAS,GAAjD,mBAAOa,EAAP,KAAqBC,EAArB,KAIMC,EAAU,WAEd,GAAKd,EAKA,GAAIA,GAAaY,EAEpBH,EAGED,EAAMO,KAAI,SAACC,GAGT,OAAIA,EAAQC,KAAOP,EAEV,2BAAKM,GAAZ,IAAqBE,KAAMlB,IAEtBgB,MAKXf,EAAa,IACbU,EAAc,MACdE,GAAgB,OAKb,CACH,IAAMM,EAAiB,CACrBF,IAAI,IAAIG,MAAOC,UAAUC,WACzBJ,KAAMlB,GAIRS,EAAS,GAAD,mBAAKD,GAAL,CAAYW,KACpBlB,EAAa,SApCbsB,MAAM,sBAsFV,OANAC,qBAAU,WAGRrB,aAAasB,QAAQ,aAAcpB,KAAKqB,UAAUlB,MACjD,CAACA,IAGF,mCACE,qBAAKmB,UAAU,WAAf,SACE,sBAAKA,UAAU,YAAf,UACE,mCACE,qBAAKC,IAAI,oBAAoBC,IAAI,aACjC,sEAEF,sBAAKF,UAAU,WAAf,UACE,uBACEG,KAAK,OACLC,YAAY,kBACZJ,UAAU,eACVK,MAAOhC,EACPiC,SAAU,SAACC,GAAD,OAAWjC,EAAaiC,EAAMC,OAAOH,UAMhDpB,EACC,mBAAGe,UAAU,sBAAsBS,QAAStB,IAE5C,mBAAGa,UAAU,qBAAqBS,QAAStB,OAI/C,qBAAKa,UAAU,YAAf,SACGnB,EAAMO,KAAI,SAACC,GAGV,OACE,sBAAKW,UAAU,WAAf,UACE,6BAAKX,EAAQE,OACb,sBAAKS,UAAU,WAAf,UACE,mBACEA,UAAU,sBACVS,QAAS,kBA/EZ,SAACC,GAChB,IAAMC,EAAmB9B,EAAM+B,MAAK,SAACvB,GACnC,OAAOA,EAAQC,KAAOoB,KAMxBpC,EAAaqC,EAAiBpB,MAE9BP,EAAc0B,GAEdxB,GAAgB,GAmEiB2B,CAASxB,EAAQC,OAIlC,mBACEU,UAAU,2BACVS,QAAS,kBAnEV,SAACC,GAClB,IAAMI,EAAejC,EAAMkC,QAAO,SAAC1B,GAEjC,OAAOA,EAAQC,KAAOoB,KAGxB5B,EAASgC,GA6DwBE,CAAW3B,EAAQC,YAXTD,EAAQC,SAsB7C,qBAAKU,UAAU,YAAf,SACE,wBACEA,UAAU,eACV,oBAAkB,aAElBS,QAxEM,WAEhB3B,EAAS,KAkED,SAOE,2DC/KCmC,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ef0d5b65.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./style.css\";\n\n// get the localStorage data back\nconst getLocalData = () => {\n  const lists = localStorage.getItem(\"mytodolist\");\n  // So, in the getItem I have to pass the Key:\"mytodolist\" which I passed in useEffect for using the Local Storage in String format.\n\n  if (lists) {\n    return JSON.parse(lists);\n    // If your List is not empty / EXIST. I'm haveing the lists in Array formating. And using JS builtin function parse.\n  } else {\n    return [];\n    // Else just return an empty array.\n  }\n};\n// As we want the List to be there. ALthough we refresh the page.\n// I'm getting the data from the Todo List and getting it stored in the Local Storage.\n\nconst Todo = () => {\n  // Making useState Hooks for all the Necessary operations we want to do.\n\n  const [inputdata, setInputData] = useState(\"\");\n  // The input box we created for adding the list we have for the day to be created. Intially it is EMPTY.\n\n  const [items, setItems] = useState(getLocalData());\n  // Items are the array of ALL the lists I have created and getting stored in the Local Storage. Intially I'm calling the abobe function.\n\n  const [isEditItem, setIsEditItem] = useState(\"\");\n  // For updating the current list if we have made any spell erroes. Intially it is EMPTY.\n\n  const [toggleButton, setToggleButton] = useState(false);\n  // As soon as you click Edit icon, I want the PLUS to change to Edit icon. So, that user also knows now it's in edit mode.\n\n  // adding the list fucnction\n  const addItem = () => {\n    // A Base case if you not filled anything in the input box.\n    if (!inputdata) {\n      alert(\"plz fill the data\");\n    }\n\n    // This Else if, is IF you want to EDIT.\n    else if (inputdata && toggleButton) {\n      // So, if my inputdata EXIST and toggleButton is True.\n      setItems(\n        // Then use the setItems function from usestate above to set the lists.\n\n        items.map((curElem) => {\n          // And loop through entire items and as we have given UNIQUE ID to every list items.\n\n          if (curElem.id === isEditItem) {\n            // So, we are checking that if that ID which we clicked to edit is same or not.\n            return { ...curElem, name: inputdata };\n          }\n          return curElem;\n        })\n      );\n\n      // After Adding the data to the list. We want the input box to be cleared, edit iterm should be null. And PLUS icon should appear now.\n      setInputData(\"\");\n      setIsEditItem(null);\n      setToggleButton(false);\n    }\n\n    // Here we are justing adding a new ID called Date with Time in string format to the new List beign added.\n    // To each list because in future we want them to edit if they want.\n    else {\n      const myNewInputData = {\n        id: new Date().getTime().toString(),\n        name: inputdata,\n      };\n\n      // At the end we want the set the items with new input values NOT TOUCHING THE PREVIOUS VALUES (...) OPERATOR.\n      setItems([...items, myNewInputData]);\n      setInputData(\"\");\n    }\n  };\n\n  // Edit the items if clicked.\n  // So, this function is handling if the EDIT button is clicked.\n  // As we need to know if list need to be edit so that we can get the intial value to he input box.\n  // So, the reason I'm taking it's Index(ID) as an argument.\n  const editItem = (index) => {\n    const item_todo_edited = items.find((curElem) => {\n      return curElem.id === index;\n      // So, first need to FIND the Index of that list which needs to be edited.\n      // Then we are using the JS function and comparing the ID coming while clicked if EQUAL to the ID stored in local storage.\n    });\n\n    // Then we want the Initial value of that list to come to the input box.\n    setInputData(item_todo_edited.name);\n    // We have Edit mode should be triggered.\n    setIsEditItem(index);\n    // With the PLUS icon replaced with the EDIT icon.\n    setToggleButton(true);\n  };\n\n  // Deleting the selected items\n  // So, this function is handling if the DELETE button is clicked.\n  // In order to know which list should be deletd, the reason I'm taking it's Index(ID) as an argument.\n  const deleteItem = (index) => {\n    const updatedItems = items.filter((curElem) => {\n      // Then I'm filtering the entire items and getting the only list which I want to delete by comparing ID coming while clicked if EQUAL to the ID stored in local storage.\n      return curElem.id !== index;\n      // THEN ONLY RETURN THE VALUES WHICH ID IS NOT MATCHED AND REMOVE THE LIST ITEM WHICH ID WAS MATCHED. :) Technique\n    });\n    setItems(updatedItems);\n    // Then set the setItems to the new updatedItems we returned at the end.\n  };\n\n  // Removing all the elements\n  const removeAll = () => {\n    // Just set the setItems function to EMPTY array because it will intial the items array to be EMPTY. :) Easy.\n    setItems([]);\n  };\n\n  // We want to have the lists, although we REFRESH the page. So, using LocalStorage\n  // useEffect Hook is used because whenever your items array is being trigged ([items]) then we want this Hook to render as well.\n  useEffect(() => {\n    // So, in the localStorage we are setting our items to a key : value pair as instructed by the Browser.\n    // Key(string) ->  mytodolist and Value(string) -> Items in an string format using JS function\n    localStorage.setItem(\"mytodolist\", JSON.stringify(items));\n  }, [items]);\n\n  return (\n    <>\n      <div className=\"main-div\">\n        <div className=\"child-div\">\n          <figure>\n            <img src=\"./images/todo.svg\" alt=\"todologo\" />\n            <figcaption>Add Your List Here ✌</figcaption>\n          </figure>\n          <div className=\"addItems\">\n            <input\n              type=\"text\"\n              placeholder=\"✍ Add Item\"\n              className=\"form-control\"\n              value={inputdata}\n              onChange={(event) => setInputData(event.target.value)}\n              // Setting up the data added to the new list in the items array.\n            />\n            {/* This is for PLUS and EDIT icon */}\n            {/* So, if the toggleButton is TRUE, put EDIT ICON and call addItem function */}\n            {/* If the toggleButton is FALSE, put PLUS ICON and call addItem function */}\n            {toggleButton ? (\n              <i className=\"far fa-edit add-btn\" onClick={addItem}></i>\n            ) : (\n              <i className=\"fa fa-plus add-btn\" onClick={addItem}></i>\n            )}\n          </div>\n          {/* Rendering our items*/}\n          <div className=\"showItems\">\n            {items.map((curElem) => {\n              // Using MAP because it will be continous.\n              // Using curElem for getting all the field from the items array to display.\n              return (\n                <div className=\"eachItem\" key={curElem.id}>\n                  <h3>{curElem.name}</h3>\n                  <div className=\"todo-btn\">\n                    <i\n                      className=\"far fa-edit add-btn\"\n                      onClick={() => editItem(curElem.id)}\n                      // IF EDIT icon is clicked, call editItem function().\n                      // () => is used because we only want to call it Once and not to go in INFINITE Loop.\n                    ></i>\n                    <i\n                      className=\"far fa-trash-alt add-btn\"\n                      onClick={() => deleteItem(curElem.id)}\n                      // IF DELETE icon is clicked, call deleteItem function().\n                      // () => is used because we only want to call it Once and not to go in INFINITE Loop.\n                    ></i>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          {/* remove all button  */}\n          <div className=\"showItems\">\n            <button\n              className=\"btn effect04\"\n              data-sm-link-text=\"Remove All\"\n              // This class is just for animation I added.\n              onClick={removeAll}\n              // IF this button icon is clicked, call removeAll function().\n            >\n              <span> CHECK LIST</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Todo;\n","import \"./App.css\";\nimport Todo from \"./components/todoreact/todo\";\n\nfunction App() {\n  return (\n    <>\n      <Todo />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}